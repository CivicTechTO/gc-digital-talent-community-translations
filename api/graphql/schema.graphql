"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A RFC 5321 compliant email."
scalar Email @scalar(class: "MLL\\GraphQLScalars\\Email")

"A phone number string which must comply with E.164 international notation, including country code and preceding '+'."
scalar PhoneNumber

type LocalizedString {
    en: String
    fr: String
}

enum Language {
    EN @enum(value: "en")
    FR @enum(value: "fr")
}

type User {
    id: ID!
    email: Email!
    firstName: String @rename(attribute: "first_name")
    lastName: String @rename(attribute: "last_name")
    telephone: PhoneNumber
    preferredLang: Language @rename(attribute: "preferred_lang")
    pools: [Pool] @hasMany
    poolCandidates: [PoolCandidate] @hasMany
}

type Pool {
    id: ID!
    owner: User @belongsTo(relation: "user")
    name: LocalizedString
    description: LocalizedString
    classifications: [Classification] @belongsToMany
    assetCriteria: [CmoAsset] @belongsToMany
    essentialCriteria: [CmoAsset] @belongsToMany
    operationalRequirements: [OperationalRequirement] @belongsToMany
    poolCandidates: [PoolCandidate] @hasMany
}

enum PoolCandidateStatus {
    AVAILABLE
    PLACED_INDETERMINATE
    PLACED_TERM
    NO_LONGER_INTERESTED
}

type PoolCandidate {
    id: ID!
    pool: Pool @belongsTo
    user: User @belongsTo

    # cmoIdentifier can be an arbitrary string used to relate this candidate to an external database.
    cmoIdentifier: ID @rename(attribute: "cmo_identifier")
    # Expiry date for this candidate being in the pool.
    expiryDate: Date

    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")

    hasDiploma: Boolean @rename(attribute: "has_diploma")
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    acceptedOperationalRequirements: [OperationalRequirement] @belongsToMany
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: [Classification] @belongsToMany
    cmoAssets: [CmoAsset] @belongsToMany

    status: PoolCandidateStatus
}

enum LanguageAbility {
    ENGLISH
    FRENCH
    BILINGUAL
}

enum WorkRegion {
    TELEWORK
    NATIONAL_CAPITAL
    ATLANTIC
    QUEBEC
    ONTARIO
    PRAIRIE
    BRITISH_COLUMBIA
    NORTH
}

"""
e.g. Overtime as Required, Shift Work, Travel as Required, etc.
"""
type OperationalRequirement {
    id: ID!
    key: String!
    name: LocalizedString!
    description: LocalizedString
}

enum SalaryRange {
    _50_59K
    _60_69K
    _70_79K
    _80_89K
    _90_99K
    _100K_PLUS
}

type Classification {
    id: ID!
    name: LocalizedString
    group: String!
    level: Int!
    minSalary: Int @rename(attribute: "min_salary")
    maxSalary: Int @rename(attribute: "max_salary")
}

"""
e.g. Application Development, Quality Assurance, Enterprise Architecture, IT Project Management, etc.
"""
type CmoAsset {
    id: ID!
    key: String!
    name: LocalizedString!
    description: LocalizedString
}
type Query {
    users: [User]! @all
    user(id: ID! @eq): User @find
    pools: [Pool]! @all
    pool(id: ID! @eq): Pool @find
    poolCandidates: [PoolCandidate]! @all
    poolCandidate(id: ID! @eq): PoolCandidate @find

    classifications: [Classification]! @all
    operationalRequirements: [OperationalRequirement]! @all
    cmoAssets: [CmoAsset]! @all
}
"""
When creating a User, name and email are required.
"""
input CreateUserInput {
    firstName: String! @rename(attribute: "first_name")
    lastName: String! @rename(attribute: "last_name")
    email: Email! @rules(apply: ["unique:users,email"])
    telephone: PhoneNumber
    preferredLang: Language @rename(attribute: "preferred_lang")
}
"""
When updating a User, all fields are optional, and email cannot be changed.
"""
input UpdateUserInput {
    firstName: String @rename(attribute: "first_name")
    lastName: String @rename(attribute: "last_name")
    telephone: PhoneNumber
    preferredLang: Language @rename(attribute: "preferred_lang")
}

input LocalizedStringInput {
    en: String
    fr: String
}

input CreateUserBelongsTo {
    connect: ID
}

input CreatePoolBelongsTo {
    connect: ID
}

input CreateClassificationInput {
    name: LocalizedStringInput
    group: String!
    level: Int!
    minSalary: Int @rename(attribute: "min_salary")
    maxSalary: Int @rename(attribute: "max_salary")
}

input CreateClassificationBelongsToMany {
    create: [CreateClassificationInput!]
    connect: [ID!]
}

input CreateCmoAssetInput {
    key: String!
    name: LocalizedStringInput!
    description: LocalizedStringInput
}

input CreateCmoAssetBelongsToMany {
    create: [CreateCmoAssetInput!]
    connect: [ID!]
}

input CreateOperationalRequirementInput {
    key: String
    name: LocalizedStringInput!
    description: LocalizedStringInput
}

input CreateOperationalRequirementBelongsToMany {
    create: [CreateOperationalRequirementInput!]
    connect: [ID!]
}

input CreatePoolCandidateInput {
    pool: CreatePoolBelongsTo @belongsTo
    user: CreateUserBelongsTo @belongsTo
    cmoIdentifier: ID @rename(attribute: "cmo_identifier")
    expiryDate: Date
    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")
    hasDiploma: Boolean @rename(attribute: "has_diploma")
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    acceptedOperationalRequirements: [OperationalRequirement] @belongsToMany
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: [Classification] @belongsToMany
    cmoAssets: [CmoAsset] @belongsToMany
    status: PoolCandidateStatus
}

input CreatePoolCandidateHasMany {
    create: [CreatePoolCandidateInput!]
}

input CreatePoolInput {
    owner: CreateUserBelongsTo @rename(attribute: "user")
    name: LocalizedStringInput
    description: LocalizedStringInput
    classifications: CreateClassificationBelongsToMany
    assetCriteria: CreateCmoAssetBelongsToMany
    essentialCriteria: CreateCmoAssetBelongsToMany
    operationalRequirements: CreateOperationalRequirementBelongsToMany
    poolCandidates: CreatePoolCandidateHasMany
}

input UpdateUserBelongsTo {
    connect: ID
}

input UpdatePoolBelongsTo {
    connect: ID
}

input UpdateClassificationInput {
    name: LocalizedStringInput
    group: String!
    level: Int!
    minSalary: Int @rename(attribute: "min_salary")
    maxSalary: Int @rename(attribute: "max_salary")
}

input UpdateClassificationBelongsToMany {
    create: [UpdateClassificationInput!]
    connect: [ID!]
}

input UpdateCmoAssetInput {
    key: String!
    name: LocalizedStringInput!
    description: LocalizedStringInput
}

input UpdateCmoAssetBelongsToMany {
    create: [UpdateCmoAssetInput!]
    connect: [ID!]
}

input UpdateOperationalRequirementInput {
    key: String
    name: LocalizedStringInput!
    description: LocalizedStringInput
}

input UpdateOperationalRequirementBelongsToMany {
    create: [UpdateOperationalRequirementInput!]
    connect: [ID!]
}

input UpdatePoolCandidateInput {
    pool: UpdatePoolBelongsTo @belongsTo
    user: UpdateUserBelongsTo @belongsTo
    cmoIdentifier: ID @rename(attribute: "cmo_identifier")
    expiryDate: Date
    isWoman: Boolean @rename(attribute: "is_woman")
    hasDisability: Boolean @rename(attribute: "has_disability")
    isIndigenous: Boolean @rename(attribute: "is_indigenous")
    isVisibleMinority: Boolean @rename(attribute: "is_visible_minority")
    hasDiploma: Boolean @rename(attribute: "has_diploma")
    languageAbility: LanguageAbility @rename(attribute: "language_ability")
    locationPreferences: [WorkRegion] @rename(attribute: "location_preferences")
    acceptedOperationalRequirements: [OperationalRequirement] @belongsToMany
    expectedSalary: [SalaryRange] @rename(attribute: "expected_salary")
    expectedClassifications: [Classification] @belongsToMany
    cmoAssets: [CmoAsset] @belongsToMany
    status: PoolCandidateStatus
}

input UpdatePoolCandidateHasMany {
    create: [UpdatePoolCandidateInput!]
}

input UpdatePoolInput {
    owner: UpdateUserBelongsTo @rename(attribute: "user")
    name: LocalizedStringInput
    description: LocalizedStringInput
    classifications: UpdateClassificationBelongsToMany
    assetCriteria: UpdateCmoAssetBelongsToMany
    essentialCriteria: UpdateCmoAssetBelongsToMany
    operationalRequirements: UpdateOperationalRequirementBelongsToMany
    poolCandidates: UpdatePoolCandidateHasMany
}

type Mutation {
    createUser(user: CreateUserInput! @spread): User @create
    updateUser(id: ID!, user: UpdateUserInput! @spread): User @update
    deleteUser(id: ID!): User @delete(globalId: false)
    createPool(pool: CreatePoolInput! @spread): Pool @create
    updatePool(id: ID!, pool: UpdatePoolInput! @spread): Pool @update
}
